#include <Arduino.h>
#include <U8g2lib.h>
#include <Wire.h>
#include <Adafruit_NeoPixel.h>
#include "AudioTools.h"
#include "BluetoothA2DPSink.h"

// ----------------- PIN & DEFINIZIONI -----------------
#define SDA 21 
#define SCL 22 
#define PIN_RGB     18
#define NUM_PIXELS  1
#define I2S_BCLK    25
#define I2S_LRCLK   27
#define I2S_DOUT    26
#define BTN_PIN     36   // Pulsante pairing

// ----------------- OGGETTI -----------------
Adafruit_NeoPixel pixel(NUM_PIXELS, PIN_RGB, NEO_GRB + NEO_KHZ800);
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE, SCL, SDA);
I2SStream i2s;
BluetoothA2DPSink a2dp_sink(i2s);

// ----------------- VARIABILI -----------------
String currentTrack = "";
String currentDevice = "";
bool isConnected = false;
bool isPaused = false;
unsigned long lastActivity = 0;
bool pairingMode = false;
static const unsigned char myBitmap [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x1f, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x3f, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xe0, 0xff, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0xc0, 0xff, 0xf0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x80, 0xff, 0xf9, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x80, 0xff, 0xf9, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf0, 0xef, 0x07, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xfb, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf8, 0xff, 0x03, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 0xf0, 0x0f, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0xff, 0x01, 0xf8, 0x0f, 0xfc, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 0xf8, 0x1f, 0xfc, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0xf8, 0x0f, 0x80, 0xff, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x0f, 0xc0, 0xff, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x7f, 0xf0, 0x07, 0xc0, 0xff, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x7f, 0xf0, 0x07, 0xe0, 0xff, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xdf, 0xff, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xcf, 0xff, 0x01, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x87, 0xff, 0x01, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x07, 0xff, 0x03, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0xfe, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0xfe, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0x00, 0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xf8, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf8, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};
// ----------------- CALLBACKS -----------------
void avrc_metadata_callback(uint8_t attr, const uint8_t *data) {
  if (attr == ESP_AVRC_MD_ATTR_TITLE) {
    currentTrack = (const char*)data;
  }
  lastActivity = millis();
}

void connection_state_changed(esp_a2d_connection_state_t state, void *ptr) {
  if (state == ESP_A2D_CONNECTION_STATE_CONNECTED) {
    isConnected = true;
    pairingMode = false;
    currentDevice = a2dp_sink.get_remote_name();
  } else {
    isConnected = false;
    pairingMode = true;
    currentDevice = "";
    currentTrack = "";
  }
  lastActivity = millis();
}

void playback_state_callback(esp_avrc_playback_stat_t playback) {
  isPaused = (playback != ESP_AVRC_PLAYBACK_PLAYING);
  lastActivity = millis();
}

// ----------------- GRAFICA DISPLAY -----------------
// Variabili statiche per lo scroll
static int scrollX = 0;
static unsigned long lastScroll = 0;

void drawScrollingText(const char* text, int y) {
  int textWidth = u8g2.getStrWidth(text);

  if (textWidth <= 128) {
    // Se il testo entra nello schermo lo scrivo normale
    u8g2.drawStr(10, y, text);
    return;
  }

  // Scroll ogni 200 ms
  if (millis() - lastScroll > 200) {
    scrollX--;
    if (scrollX < -textWidth) scrollX = 128;
    lastScroll = millis();
  }

  u8g2.drawStr(scrollX, y, text);
}

void showStatusScreen() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x12_tr);

  // Stato connessione
  if (pairingMode) {
    u8g2.setFont(u8g2_font_open_iconic_all_2x_t);
    u8g2.drawGlyph(10, 32, 0x005E); // Bluetooth
    u8g2.setFont(u8g2_font_8x13_tf);
    u8g2.drawStr(40, 32, "Pairing...");
  } 
  else if (isConnected) {
    u8g2.setFont(u8g2_font_open_iconic_all_2x_t);
    u8g2.drawGlyph(10, 20, 0x00C6); // Connesso
    u8g2.setFont(u8g2_font_6x13_tf);
    u8g2.drawStr(45, 20, "Connesso");
  } 
  else {
    u8g2.setFont(u8g2_font_open_iconic_all_2x_t);
    u8g2.drawGlyph(10, 32, 0x00C5); // Disconnesso
    u8g2.setFont(u8g2_font_8x13_tf);
    u8g2.drawStr(40, 32, "Disconnesso");
  }

  // Nome dispositivo se presente
  if (currentDevice.length() > 0) {
    u8g2.setFont(u8g2_font_6x13_tf);
    u8g2.drawStr(10, 35, currentDevice.c_str());
  }

  // Brano o stato riproduzione
  u8g2.setFont(u8g2_font_6x13_tf);
  if(isConnected){
    if (currentTrack.length() > 0) {
        drawScrollingText(currentTrack.c_str(), 50); 
        if (isPaused) {
          u8g2.drawStr(10, 63, "In pausa");
        } else {
          u8g2.drawStr(10, 63, "In riproduzione");
        }
      } else {
        // Nessun titolo â†’ mostra solo stato
        if (isPaused) {
          u8g2.drawStr(10, 55, "In pausa");
        } else {
          u8g2.drawStr(10, 55, "In riproduzione");
        }
      }
    }
  u8g2.sendBuffer();
}

// ----------------- LED -----------------
void updateLED() {
  if (pairingMode) {
    static unsigned long lastBlink = 0;
    static bool on = false;
    if (millis() - lastBlink > 500) {
      lastBlink = millis();
      on = !on;
      if (on) pixel.setPixelColor(0, pixel.Color(0, 130, 252));
      else pixel.setPixelColor(0, 0);
    }
  } else if (isConnected) {
    pixel.setPixelColor(0, pixel.Color(0, 130, 252)); // Blu fisso
  } else {
    static unsigned long lastBlink1 = 0;
    static bool on1 = false;
    if (millis() - lastBlink1 > 2000) {
      lastBlink1 = millis();
      on1 = !on1;
      if (on1)  pixel.setPixelColor(0, pixel.Color(255, 130, 0)); // Grigio tenue = low power;
      else pixel.setPixelColor(0, 0);
    }
   
  }
  pixel.show();
}

// ----------------- SETUP -----------------
void setup() {
  Serial.begin(115200);
  
  // LED
  pixel.begin();
  pixel.setBrightness(100);

  // Display
  u8g2.begin();

  // Animazione di avvio (bitmap)
u8g2.clearBuffer();
u8g2.drawXBMP(0, 0, 128, 64, myBitmap);
u8g2.sendBuffer();
delay(3000); // Mostra per 3 secondi

// Mostra scritta finale
u8g2.clearBuffer();
u8g2.setFont(u8g2_font_helvB14_tr);
u8g2.drawStr(10, 32, "BY G.ROSSI");
u8g2.sendBuffer();
delay(1500); // Mostra la scritta per 1,5 secondi

// Pulisci lo schermo e passa allo status
u8g2.clearBuffer();
u8g2.sendBuffer();

  // I2S
  auto cfg = i2s.defaultConfig();
  cfg.pin_bck = I2S_BCLK;
  cfg.pin_ws = I2S_LRCLK;
  cfg.pin_data = I2S_DOUT;
  i2s.begin(cfg);

  // Pulsante
  pinMode(BTN_PIN, INPUT);

  // A2DP
  a2dp_sink.set_avrc_metadata_callback(avrc_metadata_callback);
  a2dp_sink.set_avrc_metadata_attribute_mask(ESP_AVRC_MD_ATTR_TITLE);
  a2dp_sink.set_avrc_rn_playstatus_callback(playback_state_callback);
  a2dp_sink.set_on_connection_state_changed(connection_state_changed);
  a2dp_sink.start("NEXO-BT");
  
  pairingMode = true;
  lastActivity = millis();
}

// ----------------- LOOP -----------------
void loop() {
  // Gestione pulsante pairing
  if (digitalRead(BTN_PIN) == HIGH) {
    a2dp_sink.disconnect();
    pairingMode = true;
  }

  // Low power dopo 1 minuto
  if ((millis() - lastActivity) > 60000 && !isConnected) {
    pairingMode = false;
    // TODO: inserire codice per ridurre consumi (es. esp_light_sleep_start)
  }

  if (isConnected && currentDevice == "") {
    currentDevice = a2dp_sink.get_remote_name();
  }

  // Aggiorna LED e Display
  updateLED();
  showStatusScreen();

  delay(100);
}
